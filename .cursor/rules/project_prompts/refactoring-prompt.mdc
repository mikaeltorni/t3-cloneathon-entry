---
description: Refactoring the project with continuous security monitoring
globs: 
alwaysApply: false
---
# OpenRouter Chat App - Refactoring & Security Guide

## 🎯 Refactoring & Security Objectives

This document outlines a systematic refactoring plan for the OpenRouter Chat App to improve:
- **Code organization and structure**
- **Type safety and consistency** 
- **Reusability and maintainability**
- **Performance and scalability**
- **Developer experience**
- **Security posture and flaw detection**

> **Security Monitoring:**  
> Throughout the refactoring process, continuously check the codebase for security flaws. If any vulnerabilities or insecure patterns are detected, immediately mention them in the chat, specifying the file and nature of the issue.

## 📊 Current Project Analysis

### Project Structure
```
├── src/                    # Server-side code
│   ├── server/             # Express server and API routes
│   └── shared/             # Shared types and utilities
├── web-app/               # React frontend application
│   ├── src/
│   │   ├── components/    # React components
│   │   ├── hooks/         # Custom React hooks
│   │   ├── services/      # API and external services
│   │   ├── utils/         # Utility functions
│   │   └── assets/        # Static assets
└── data/                  # Application data storage
```

### Key Areas for Refactoring

#### 1. **Component Architecture** 🏗️
- **Current Issues**: Large, monolithic components with mixed concerns
- **Target**: Smaller, focused components with clear responsibilities
- **Improvements**: 
  - Extract business logic into custom hooks
  - Separate UI components from data logic
  - Create compound components for complex UIs
  - Implement proper prop interfaces and validation

#### 2. **Custom Hooks** 🪝
- **Current Issues**: Logic mixed directly in components
- **Target**: Reusable hooks for common patterns
- **Improvements**:
  - Extract stateful logic into custom hooks
  - Create hooks for API operations
  - Implement form handling hooks
  - Add utility hooks for common operations

#### 3. **Type Safety** 🔒
- **Current Issues**: Some loose typing and potential any types
- **Target**: Strict TypeScript with comprehensive type coverage
- **Improvements**:
  - Strengthen API response types
  - Add runtime type validation where needed
  - Implement proper error type handling
  - Use discriminated unions for complex types

#### 4. **Error Handling** ⚠️
- **Current Issues**: Inconsistent error handling patterns
- **Target**: Comprehensive error boundary and handling system
- **Improvements**:
  - Global error boundary implementation
  - Consistent error UI patterns
  - Proper error logging and reporting
  - User-friendly error messages

## 🚀 Refactoring Implementation Plan

### Phase 1: Extract Custom Hooks
1. **Create useChat Hook**
   - Extract chat management logic from App.tsx
   - Handle thread selection, creation, and message sending
   - Manage loading states and errors

2. **Create useModels Hook**
   - Extract model loading and selection logic
   - Handle model configuration and reasoning modes
   - Provide model-related utilities

3. **Create useLocalStorage Hook**
   - Extract localStorage operations
   - Type-safe storage with serialization
   - Error handling for storage operations

### Phase 2: Component Decomposition
4. **Break Down App.tsx**
   - Extract main layout component
   - Separate sidebar logic
   - Create dedicated error handling components

5. **Decompose ChatInterface.tsx**
   - Extract message list component
   - Separate input form component
   - Create individual message components

6. **Enhance UI Components**
   - Standardize component APIs
   - Add proper accessibility features
   - Implement consistent styling patterns

### Phase 3: Service Layer Enhancement
7. **Improve API Services**
   - Add better error handling
   - Implement request/response types
   - Create service hooks for API operations

8. **Enhance Type Definitions**
   - Add stricter typing
   - Create utility types
   - Implement runtime validation

### Phase 4: Performance & Cleanup
9. **Performance Optimization**
   - Add React.memo where appropriate
   - Optimize re-renders with useCallback/useMemo
   - Clean up unused code and dependencies

10. **Code Quality**
    - Ensure consistent naming conventions
    - Add comprehensive JSDoc comments
    - Remove dead code and unused imports

## 🛠️ Implementation Guidelines

### Step-by-Step Approach
1. **Make incremental changes** - Don't break existing functionality
2. **Test after each step** - Ensure builds and functionality work
3. **Think between steps** - Analyze impact before proceeding
4. **Maintain backwards compatibility** - Don't break existing APIs
5. **Use existing dependencies** - Avoid adding new libraries unless necessary

### Refactoring Principles
- **Single Responsibility**: Each component/hook has one clear purpose
- **Extraction over Addition**: Extract existing logic rather than adding new libraries
- **Incremental Improvement**: Small, focused changes that build up
- **Preserve Functionality**: All existing features must continue working

## 📋 Current Step-by-Step Plan

**STEP 1: Extract useChat Hook**
- Move chat-related state and logic from App.tsx
- Create reusable hook for chat operations
- Maintain all existing functionality

**NEXT STEPS:**
- Continue with custom hooks extraction
- Component decomposition
- Service layer improvements
- Performance optimization

Remember: **Focus on extracting and organizing existing code, not adding new dependencies.** 
